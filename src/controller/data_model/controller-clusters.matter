// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

client cluster AccessControl = 31 {
  enum AuthMode : ENUM8 {
    kPase = 1;
    kCase = 2;
    kGroup = 3;
  }

  enum ChangeTypeEnum : ENUM8 {
    kChanged = 0;
    kAdded = 1;
    kRemoved = 2;
  }

  enum Privilege : ENUM8 {
    kView = 1;
    kProxyView = 2;
    kOperate = 3;
    kManage = 4;
    kAdminister = 5;
  }

  struct AccessControlEntry {
    fabric_idx fabricIndex = 0;
    Privilege privilege = 1;
    AuthMode authMode = 2;
    nullable INT64U subjects[] = 3;
    nullable Target targets[] = 4;
  }

  struct Target {
    nullable cluster_id cluster = 0;
    nullable endpoint_no endpoint = 1;
    nullable devtype_id deviceType = 2;
  }

  struct ExtensionEntry {
    fabric_idx fabricIndex = 0;
    OCTET_STRING<254> data = 1;
  }

  info event AccessControlEntryChanged = 0 {
    fabric_idx adminFabricIndex = 0;
    nullable node_id adminNodeID = 1;
    nullable INT16U adminPasscodeID = 2;
    ChangeTypeEnum changeType = 3;
    nullable AccessControlEntry latestValue = 4;
  }

  info event AccessControlExtensionChanged = 1 {
    fabric_idx adminFabricIndex = 0;
    nullable node_id adminNodeID = 1;
    nullable INT16U adminPasscodeID = 2;
    ChangeTypeEnum changeType = 3;
    nullable ExtensionEntry latestValue = 4;
  }

  attribute AccessControlEntry acl[] = 0;
  attribute ExtensionEntry extension[] = 1;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute int16u clusterRevision = 65533;
}

client cluster AdministratorCommissioning = 60 {
  enum CommissioningWindowStatus : ENUM8 {
    kWindowNotOpen = 0;
    kEnhancedWindowOpen = 1;
    kBasicWindowOpen = 2;
  }

  enum StatusCode : ENUM8 {
    kBusy = 1;
    kPAKEParameterError = 2;
    kWindowNotOpen = 3;
  }

  readonly attribute int8u windowStatus = 0;
  readonly attribute fabric_idx adminFabricIndex = 1;
  readonly attribute int16u adminVendorId = 2;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute int16u clusterRevision = 65533;

  request struct OpenBasicCommissioningWindowRequest {
    INT16U commissioningTimeout = 0;
  }

  request struct OpenCommissioningWindowRequest {
    INT16U commissioningTimeout = 0;
    OCTET_STRING PAKEVerifier = 1;
    INT16U discriminator = 2;
    INT32U iterations = 3;
    OCTET_STRING salt = 4;
    INT16U passcodeID = 5;
  }

  timed command OpenBasicCommissioningWindow(OpenBasicCommissioningWindowRequest): DefaultSuccess = 1;
  timed command OpenCommissioningWindow(OpenCommissioningWindowRequest): DefaultSuccess = 0;
  timed command RevokeCommissioning(): DefaultSuccess = 2;
}

client cluster Basic = 40 {
  critical event StartUp = 0 {
    INT32U softwareVersion = 0;
  }

  critical event ShutDown = 1 {
  }

  info event Leave = 2 {
  }

  info event ReachableChanged = 3 {
    boolean reachableNewValue = 0;
  }

  readonly attribute int16u dataModelRevision = 0;
  readonly attribute char_string<32> vendorName = 1;
  readonly attribute vendor_id vendorID = 2;
  readonly attribute char_string<32> productName = 3;
  readonly attribute int16u productID = 4;
  attribute char_string<32> nodeLabel = 5;
  attribute char_string<2> location = 6;
  readonly attribute int16u hardwareVersion = 7;
  readonly attribute char_string<64> hardwareVersionString = 8;
  readonly attribute int32u softwareVersion = 9;
  readonly attribute char_string<64> softwareVersionString = 10;
  readonly attribute char_string<16> manufacturingDate = 11;
  readonly attribute char_string<32> partNumber = 12;
  readonly attribute long_char_string<256> productURL = 13;
  readonly attribute char_string<64> productLabel = 14;
  readonly attribute char_string<32> serialNumber = 15;
  attribute boolean localConfigDisabled = 16;
  readonly attribute boolean reachable = 17;
  readonly attribute char_string<32> uniqueID = 18;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute int16u clusterRevision = 65533;
}

client cluster Binding = 30 {
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute int16u clusterRevision = 65533;

  request struct BindRequest {
    NODE_ID nodeId = 0;
    GROUP_ID groupId = 1;
    ENDPOINT_NO endpointId = 2;
    CLUSTER_ID clusterId = 3;
  }

  request struct UnbindRequest {
    NODE_ID nodeId = 0;
    GROUP_ID groupId = 1;
    ENDPOINT_NO endpointId = 2;
    CLUSTER_ID clusterId = 3;
  }

  command Bind(BindRequest): DefaultSuccess = 0;
  command Unbind(UnbindRequest): DefaultSuccess = 1;
}

client cluster Descriptor = 29 {
  struct DeviceType {
    DEVTYPE_ID type = 0;
    INT16U revision = 1;
  }

  readonly attribute DeviceType deviceList[] = 0;
  readonly attribute CLUSTER_ID serverList[] = 1;
  readonly attribute CLUSTER_ID clientList[] = 2;
  readonly attribute ENDPOINT_NO partsList[] = 3;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute int16u clusterRevision = 65533;
}

client cluster GeneralCommissioning = 48 {
  enum CommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNotCommissioning = 3;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  struct BasicCommissioningInfo {
    INT16U failSafeExpiryLengthSeconds = 0;
  }

  attribute int64u breadcrumb = 0;
  readonly attribute BasicCommissioningInfo basicCommissioningInfo = 1;
  readonly attribute enum8 regulatoryConfig = 2;
  readonly attribute enum8 locationCapability = 3;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute int16u clusterRevision = 65533;

  request struct ArmFailSafeRequest {
    INT16U expiryLengthSeconds = 0;
    INT64U breadcrumb = 1;
    INT32U timeoutMs = 2;
  }

  request struct SetRegulatoryConfigRequest {
    RegulatoryLocationType location = 0;
    CHAR_STRING countryCode = 1;
    INT64U breadcrumb = 2;
    INT32U timeoutMs = 3;
  }

  response struct ArmFailSafeResponse {
    CommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }

  response struct CommissioningCompleteResponse {
    CommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }

  response struct SetRegulatoryConfigResponse {
    CommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }

  command ArmFailSafe(ArmFailSafeRequest): ArmFailSafeResponse = 0;
  command CommissioningComplete(): CommissioningCompleteResponse = 4;
  command SetRegulatoryConfig(SetRegulatoryConfigRequest): SetRegulatoryConfigResponse = 2;
}

client cluster Identify = 3 {
  enum IdentifyEffectIdentifier : ENUM8 {
    kBlink = 0;
    kBreathe = 1;
    kOkay = 2;
    kChannelChange = 11;
    kFinishEffect = 254;
    kStopEffect = 255;
  }

  enum IdentifyEffectVariant : ENUM8 {
    kDefault = 0;
  }

  enum IdentifyIdentifyType : ENUM8 {
    kNone = 0;
    kVisibleLight = 1;
    kVisibleLED = 2;
    kAudibleBeep = 3;
    kDisplay = 4;
    kActuator = 5;
  }

  attribute int16u identifyTime = 0;
  readonly attribute enum8 identifyType = 1;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute int16u clusterRevision = 65533;

  request struct IdentifyRequest {
    INT16U identifyTime = 0;
  }

  request struct TriggerEffectRequest {
    IdentifyEffectIdentifier effectIdentifier = 0;
    IdentifyEffectVariant effectVariant = 1;
  }

  response struct IdentifyQueryResponse {
    INT16U timeout = 0;
  }

  command Identify(IdentifyRequest): DefaultSuccess = 0;
  command IdentifyQuery(): IdentifyQueryResponse = 1;
  command TriggerEffect(TriggerEffectRequest): DefaultSuccess = 64;
}

client cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  bitmap NetworkCommissioningFeature : BITMAP32 {
    kWiFiNetworkInterface = 0x1;
    kThreadNetworkInterface = 0x2;
    kEthernetNetworkInterface = 0x4;
  }

  struct NetworkInfo {
    OCTET_STRING networkID = 0;
    BOOLEAN connected = 1;
  }

  struct WiFiInterfaceScanResult {
    BITMAP8 security = 0;
    OCTET_STRING ssid = 1;
    OCTET_STRING bssid = 2;
    INT16U channel = 3;
    WiFiBand wiFiBand = 4;
    INT8S rssi = 5;
  }

  struct ThreadInterfaceScanResult {
    INT64U panId = 0;
    INT64U extendedPanId = 1;
    CHAR_STRING networkName = 2;
    INT16U channel = 3;
    INT8U version = 4;
    INT64U extendedAddress = 5;
    INT8S rssi = 6;
    INT8U lqi = 7;
  }

  readonly attribute int8u maxNetworks = 0;
  readonly attribute NetworkInfo networks[] = 1;
  readonly attribute int8u scanMaxTimeSeconds = 2;
  readonly attribute int8u connectMaxTimeSeconds = 3;
  attribute boolean interfaceEnabled = 4;
  readonly attribute NetworkCommissioningStatus lastNetworkingStatus = 5;
  readonly attribute octet_string<32> lastNetworkID = 6;
  readonly attribute int32u lastConnectErrorValue = 7;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute bitmap32 featureMap = 65532;
  readonly global attribute int16u clusterRevision = 65533;

  request struct AddOrUpdateThreadNetworkRequest {
    OCTET_STRING operationalDataset = 0;
    INT64U breadcrumb = 1;
  }

  request struct AddOrUpdateWiFiNetworkRequest {
    OCTET_STRING ssid = 0;
    OCTET_STRING credentials = 1;
    INT64U breadcrumb = 2;
  }

  request struct ConnectNetworkRequest {
    OCTET_STRING networkID = 0;
    INT64U breadcrumb = 1;
  }

  request struct RemoveNetworkRequest {
    OCTET_STRING networkID = 0;
    INT64U breadcrumb = 1;
  }

  request struct ReorderNetworkRequest {
    OCTET_STRING networkID = 0;
    INT8U networkIndex = 1;
    INT64U breadcrumb = 2;
  }

  request struct ScanNetworksRequest {
    OCTET_STRING ssid = 0;
    INT64U breadcrumb = 1;
  }

  response struct ConnectNetworkResponse {
    NetworkCommissioningStatus networkingStatus = 0;
    CHAR_STRING debugText = 1;
    INT32S errorValue = 2;
  }

  response struct NetworkConfigResponse {
    NetworkCommissioningStatus networkingStatus = 0;
    CHAR_STRING debugText = 1;
  }

  response struct ScanNetworksResponse {
    NetworkCommissioningStatus networkingStatus = 0;
    CHAR_STRING debugText = 1;
    optional WiFiInterfaceScanResult wiFiScanResults[] = 2;
    optional ThreadInterfaceScanResult threadScanResults[] = 3;
  }

  command AddOrUpdateThreadNetwork(AddOrUpdateThreadNetworkRequest): NetworkConfigResponse = 3;
  command AddOrUpdateWiFiNetwork(AddOrUpdateWiFiNetworkRequest): NetworkConfigResponse = 2;
  command ConnectNetwork(ConnectNetworkRequest): ConnectNetworkResponse = 6;
  command RemoveNetwork(RemoveNetworkRequest): NetworkConfigResponse = 4;
  command ReorderNetwork(ReorderNetworkRequest): NetworkConfigResponse = 8;
  command ScanNetworks(ScanNetworksRequest): ScanNetworksResponse = 0;
}

client cluster OnOff = 6 {
  enum OnOffDelayedAllOffEffectVariant : enum8 {
    kFadeToOffIn0p8Seconds = 0;
    kNoFade = 1;
    k50PercentDimDownIn0p8SecondsThenFadeToOffIn12Seconds = 2;
  }

  enum OnOffDyingLightEffectVariant : enum8 {
    k20PercenterDimUpIn0p5SecondsThenFadeToOffIn1Second = 0;
  }

  enum OnOffEffectIdentifier : enum8 {
    kDelayedAllOff = 0;
    kDyingLight = 1;
  }

  bitmap OnOffControl : BITMAP8 {
    kAcceptOnlyWhenOn = 0x1;
  }

  readonly attribute boolean onOff = 0;
  readonly attribute boolean globalSceneControl = 16384;
  attribute int16u onTime = 16385;
  attribute int16u offWaitTime = 16386;
  attribute enum8 startUpOnOff = 16387;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute bitmap32 featureMap = 65532;
  readonly global attribute int16u clusterRevision = 65533;

  request struct OffWithEffectRequest {
    OnOffEffectIdentifier effectId = 0;
    OnOffDelayedAllOffEffectVariant effectVariant = 1;
  }

  request struct OnWithTimedOffRequest {
    OnOffControl onOffControl = 0;
    int16u onTime = 1;
    int16u offWaitTime = 2;
  }

  command Off(): DefaultSuccess = 0;
  command OffWithEffect(OffWithEffectRequest): DefaultSuccess = 64;
  command On(): DefaultSuccess = 1;
  command OnWithRecallGlobalScene(): DefaultSuccess = 65;
  command OnWithTimedOff(OnWithTimedOffRequest): DefaultSuccess = 66;
  command Toggle(): DefaultSuccess = 2;
}

client cluster OperationalCredentials = 62 {
  enum OperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  struct NOCStruct {
    fabric_idx fabricIndex = 0;
    OCTET_STRING noc = 1;
    nullable OCTET_STRING icac = 2;
  }

  struct FabricDescriptor {
    fabric_idx fabricIndex = 0;
    OCTET_STRING<65> rootPublicKey = 1;
    INT16U vendorId = 2;
    FABRIC_ID fabricId = 3;
    NODE_ID nodeId = 4;
    CHAR_STRING<32> label = 5;
  }

  readonly attribute NOCStruct NOCs[] = 0;
  readonly attribute FabricDescriptor fabricsList[] = 1;
  readonly attribute int8u supportedFabrics = 2;
  readonly attribute int8u commissionedFabrics = 3;
  readonly attribute OCTET_STRING trustedRootCertificates[] = 4;
  readonly attribute fabric_idx currentFabricIndex = 5;
  readonly global attribute command_id serverGeneratedCommandList[] = 65528;
  readonly global attribute command_id clientGeneratedCommandList[] = 65529;
  readonly global attribute attrib_id attributeList[] = 65531;
  readonly global attribute int16u clusterRevision = 65533;

  request struct AddNOCRequest {
    OCTET_STRING NOCValue = 0;
    optional OCTET_STRING ICACValue = 1;
    OCTET_STRING IPKValue = 2;
    NODE_ID caseAdminNode = 3;
    INT16U adminVendorId = 4;
  }

  request struct AddTrustedRootCertificateRequest {
    OCTET_STRING rootCertificate = 0;
  }

  request struct AttestationRequestRequest {
    OCTET_STRING attestationNonce = 0;
  }

  request struct CSRRequestRequest {
    OCTET_STRING CSRNonce = 0;
  }

  request struct CertificateChainRequestRequest {
    INT8U certificateType = 0;
  }

  request struct RemoveFabricRequest {
    fabric_idx fabricIndex = 0;
  }

  request struct RemoveTrustedRootCertificateRequest {
    OCTET_STRING trustedRootIdentifier = 0;
  }

  request struct UpdateFabricLabelRequest {
    CHAR_STRING label = 0;
  }

  request struct UpdateNOCRequest {
    OCTET_STRING NOCValue = 0;
    optional OCTET_STRING ICACValue = 1;
  }

  response struct AttestationResponse {
    OCTET_STRING attestationElements = 0;
    OCTET_STRING signature = 1;
  }

  response struct CSRResponse {
    OCTET_STRING NOCSRElements = 0;
    OCTET_STRING attestationSignature = 1;
  }

  response struct CertificateChainResponse {
    OCTET_STRING certificate = 0;
  }

  response struct NOCResponse {
    OperationalCertStatus statusCode = 0;
    optional fabric_idx fabricIndex = 1;
    optional CHAR_STRING debugText = 2;
  }

  command AddNOC(AddNOCRequest): NOCResponse = 6;
  command AddTrustedRootCertificate(AddTrustedRootCertificateRequest): DefaultSuccess = 11;
  command AttestationRequest(AttestationRequestRequest): AttestationResponse = 0;
  command CSRRequest(CSRRequestRequest): CSRResponse = 4;
  command CertificateChainRequest(CertificateChainRequestRequest): CertificateChainResponse = 2;
  command RemoveFabric(RemoveFabricRequest): NOCResponse = 10;
  command RemoveTrustedRootCertificate(RemoveTrustedRootCertificateRequest): DefaultSuccess = 12;
  command UpdateFabricLabel(UpdateFabricLabelRequest): NOCResponse = 9;
  command UpdateNOC(UpdateNOCRequest): NOCResponse = 7;
}


endpoint 1 {
  binding cluster AccessControl;
  binding cluster AdministratorCommissioning;
  binding cluster Basic;
  binding cluster Binding;
  binding cluster Descriptor;
  binding cluster GeneralCommissioning;
  binding cluster Identify;
  binding cluster NetworkCommissioning;
  binding cluster OnOff;
  binding cluster OperationalCredentials;
}

